{"ts":1363821453426,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/perl \n\n# ------------------------------------------------------------------ #\n# includes\n\nuse strict;\n\n# ------------------------------------------------------------------ #\n# initialise\nmy $mame_version = \"99u7\";\nmy $main_path = \"d:\\\\emu\\\\maws\\\\\";\nmy $mamedat_path = $main_path.\"dat\\\\mame\\\\mame\".$mame_version.\".dat\";\n\nmy $out_path = $main_path.\"dat\\\\catgen\\\\\".$mame_version.\"\\\\\";\nmy $full_path = $out_path.\"full.list\";\nmy $games_path = $out_path.\"games.list\";\nmy $details_path = $out_path.\"details.list\";\nmy $list_path = $out_path.\"list.list\";\n\n\n# ------------------------------------------------------------------ #\n# globals\nmy @dat_content;\nmy %game_data;\nmy %chip_data;\nmy $line_num = 0;\n\nmy $game_cpus;\nmy $game_sounds;\nmy $cpu_pos = 0;\nmy $sound_pos = 0;\nmy $cpu_max = 8;\nmy $sound_max = 32;\nmy $num_games = 0;\n\n# ------------------------------------------------------------------ #\n# main\n\nif ( (-e $mamedat_path) && (-r $mamedat_path) ) {\n\n  if ( open(FULLDATA,\">$full_path\")\n       && open(GAMESDATA,\">$games_path\")\n       && open(DETAILSDATA,\">$details_path\")\n       && open(LISTDATA,\">$list_path\")\n     ) {\n     \n    print FULLDATA \"Name:     Description:\\n\";\n\n    print DETAILSDATA \" romname driver     cpu 1    cpu 2    cpu 3    cpu 4    cpu 5    cpu 6    cpu 7    cpu 8    sound 1     sound 2     sound 3     sound 4     sound 5     sound 6     sound 7     sound 8     sound 9     sound 10     sound 11     sound 12     sound 13     sound 14     sound 15     sound 16     sound 17     sound 18     sound 19     sound 20     sound 21     sound 22     sound 23     sound 24     sound 25     sound 26     sound 27     sound 28     sound 29     sound 30     sound 31     sound 32     name\\n\";\n    printn\";\n\n    print LISTDATA \"\\nMAME currently supports the following games:\\n\\n\";\n\n    ## Process MAME dat for main tables\n    # open mame dat file\n    if ( open(MAMEDATA,\"<$mamedat_path\" ) ) {\n      @dat_content = <MAMEDATA>;\n      close(MAMEDATA);\n    }\n\n    # read each line and parse\n    foreach my $curr_line (@dat_content) {\n      # check for just whitespace\n      if ( $curr_line =~ m/^\\s+$/i ) {\n        # print \"White space only: \".$line_num.\"\\n\";\n\n      # otherwise check for end of record - write current data - clear structures\n      } elsif ($curr_line =~ m/^\\s*\\)\\s*$/i ) {\n        # escape for SQL\n        my $fixed_game = &escape_hash_for_sql( \\%game_data );\n        %game_data = %$fixed_game;\n        \n        # pad CPUs\n        while ( $cpu_pos < $cpu_max ) {\n          $game_cpus .= &pad_spaces( \"\", 8 ).\" \";\n          $cpu_pos++;\n        }\n        # pad sound\n        while ( $sound_pos < $sound_max ) {\n          $game_sounds .= &pad_spaces( \"Dummy\", 11 ).\" \";\n          $sound_pos++;\n        }\n        \n        # print to each file\n        if ( $game_data{ \"file-type\" } eq \"game\" ) {\n          $num_games++;\n          print FULLDATA &pad_spaces($game_data{ \"name\" },9).' \"'.$game_data{ \"description\" }.'\"'.\"\\n\";\n          print GAMESDATA &pad_spaces($game_data{ \"year\" },4).\" \".&pad_spaces($game_data{ \"manufacturer\" },36).\" \".$game_data{ \"description\" }.\"\\n\";\n          print DETAILSDATA &pad_spaces($game_data{ \"name\" },8).\" \".&pad_spaces($game_data{ \"sourcefile\" },10).\" \".$game_cpus.$game_sounds.$game_data{ \"description\" }.\"\\n\";\n          print LISTDATA &pad_spaces($game_data{ \"name\" },8);\n          if ( !($num_games % 8) ) { \n            print LISTDATA \"\\n\";\n          } else {\n            print LISTDATA \"  \";\n          }\n        }\n\n        %game_data = ();\n        $game_cpus = \"\";\n        $game_sounds = \"\";\n        $cpu_pos = 0;\n        $sound_pos = 0;\n\n      # otherwise for and capture start of record - game or resource\n      } elsif ($curr_line =~ m/^\\s*(game|resource)\\s+\\(\\s*$/i ) {\n        # print \"Type: \".$1.\"\\n\";\n        $game_data{ \"file-type\" } = $1;\n\n      # otherwise for and capture info in record\n      } else {\n        if ($curr_line =~ m/^\\s*dipswitchinput\\s*\\(\\s*(.+)?\\s*\\)\\s*$/i ) {\n          # ignore dipswitch entries\n\n        } elsif ($curr_line =~ m/^\\s*chip\\s*\\(\\s*(.+)?\\s*\\)\\s*$/i ) {\n          # grab chip entry\n          my $temp_line = $1;\n          %chip_data = ();\n          $temp_line =~ m/type\\s+(\\w+)\\s*.*/i;\n          $chip_data{\"type\"} = $1;\n          $temp_line =~ m/name\\s+\"(.+)?\"\\s*.*/i;\n          $chip_data{\"name\"} = $1;\n          if ( $chip_data{\"type\"} eq \"cpu\" ) {\n            $game_cpus .= &pad_spaces( $chip_data{\"name\"}, 8 ).\" \";\n            $cpu_pos++;\n          } elsif ( $chip_data{\"type\"} eq \"audio\" ) {\n            $game_sounds .= &pad_spaces( $chip_data{\"name\"}, 11 ).\" \";\n            $sound_pos++;\n          } else {\n            ## nothing\n          }\n          \n        } elsif ($curr_line =~ m/^\\s*name\\s+(\\S+)$/i ) {\n          $game_data{ \"name\" } = $1;\n        } elsif ($curr_line =~ m/^\\s*year\\s+(\\S+)$/i ) {\n          $game_data{ \"year\" } = $1;\n        } elsif ($curr_line =~ m/^\\s*description\\s+\\\"(.+)?\\\"\\s*$/i ) {\n          $game_data{ \"description\" } = $1;\n        } elsif ($curr_line =~ m/^\\s*manufacturer\\s+\\\"(.+)?\\\"\\s*$/i ) {\n          $game_data{ \"manufacturer\" } = $1;\n        } elsif ($curr_line =~ m/^\\s*romof\\s+(\\S+)$/i ) {\n          $game_data{ \"romof\" } = $1;\n        } elsif ($curr_line =~ m/^\\s*cloneof\\s+(\\S+)$/i ) {\n          $game_data{ \"cloneof\" } = $1;\n\n        } elsif ($curr_line =~ m/^\\s*driver\\s*\\(\\s*(.+)?\\s*\\)\\s*$/i ) {\n          $game_data{ \"driver\" } = $1;\n          if ( $game_data{ \"driver\" } =~ m/status\\s+(\\w+)\\s*.*/i ) {\n            $game_data{ \"driver_status\" } = $1;\n          }\n          if ( $game_data{ \"driver\" } =~ m/color\\s+(\\w+)\\s*.*/i ) {\n            $game_data{ \"driver_color\" } = $1;\n          }\n          if ( $game_data{ \"driver\" } =~ m/sound\\s+(\\w+)\\s*.*/i ) {\n            $game_data{ \"driver_sound\" } = $1;\n          }\n          if ( $game_data{ \"driver\" } =~ m/palettesize\\s+(\\d+)\\s*.*/i ) {\n            $game_data{ \"driver_palettesize\" } = $1;\n          }\n\n        } elsif ($curr_line =~ m/^\\s*sourcefile\\s+(\\S+\\.\\S+)$/i ) {\n          $game_data{ \"sourcefile\" } = $1;\n\n        }\n      }\n      $line_num++;\n    }\n    print \"Processed \\'$mamedat_path\\' : $line_num lines\\n\";\n    @dat_content = (); # clear to return memory\n\n    print LISTDATA \"\\n\\nTotal ROM sets supported: \".$num_games.\"\\n\";\n\n    close(FULLDATA);\n    close(GAMESDATA);\n    close(DETAILSDATA);\n    close(LISTDATA);\n  }  else {\n    print \"Can\\'t open output file(s)\\n\";\n  } \n} else {\n  print \"Can\\'t open $mamedat_path\\n\";\n}\nexit;\n\nsub escape_for_sql {\n  my ( $in_string, @p ) = @_;\n  return $in_string;\n  \n  if ( $in_string ) {\n    $in_string =~ s/\\'/\\'\\'/ig;\n    return $in_string;\n  } else {\n    return \"\";\n  }\n}\n\nsub escape_hash_for_sql {\n  my ( $hashref, @p ) = @_;\n  my %htable = %$hashref;\n  foreach my $key ( keys %htable ) {\n    $htable{$key} = &escape_for_sql( $htable{$key} );\n  }\n  return \\%htable;\n}\n\nsub pad_spaces {\n  my ( $in_string, $req_length, @p ) = @_;\n  if ( length($in_string) < $req_length ) {\n    return sprintf '%-'.$req_length.'s', $in_string;\n  } else {\n    return $in_string;\n  }\n}\n\n__END__\n\n"]],"start1":0,"start2":0,"length1":0,"length2":7569}]],"length":7569}
{"contributors":[],"silentsave":false,"ts":1363821565863,"patch":[[{"diffs":[[0,"/perl \n\n"],[1,"# maws_dat2list.pl\n#  - convert listinfo DAT to various other legacy files that MAME used to generate. Developed for Trigg when support was dropped in MAME for various files that his program needed.\n"],[0,"# ------"]],"start1":10,"start2":10,"length1":16,"length2":215}]],"length":7768,"saved":false}
